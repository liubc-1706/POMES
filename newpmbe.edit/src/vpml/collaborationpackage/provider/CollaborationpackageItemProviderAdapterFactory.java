/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package vpml.collaborationpackage.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import vpml.collaborationpackage.util.CollaborationpackageAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class CollaborationpackageItemProviderAdapterFactory extends CollaborationpackageAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("rawtypes")
	protected Collection supportedTypes = new ArrayList();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	public CollaborationpackageItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);		
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.collaborationpackage.EMCLogicalConnector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMCLogicalConnectorItemProvider emcLogicalConnectorItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.collaborationpackage.EMCLogicalConnector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMCLogicalConnectorAdapter() {
		if (emcLogicalConnectorItemProvider == null) {
			emcLogicalConnectorItemProvider = new EMCLogicalConnectorItemProvider(this);
		}

		return emcLogicalConnectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.collaborationpackage.EMCAnd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMCAndItemProvider emcAndItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.collaborationpackage.EMCAnd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMCAndAdapter() {
		if (emcAndItemProvider == null) {
			emcAndItemProvider = new EMCAndItemProvider(this);
		}

		return emcAndItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.collaborationpackage.EMCOR} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMCORItemProvider emcorItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.collaborationpackage.EMCOR}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMCORAdapter() {
		if (emcorItemProvider == null) {
			emcorItemProvider = new EMCORItemProvider(this);
		}

		return emcorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.collaborationpackage.EMCCollaborationGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMCCollaborationGroupItemProvider emcCollaborationGroupItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.collaborationpackage.EMCCollaborationGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMCCollaborationGroupAdapter() {
		if (emcCollaborationGroupItemProvider == null) {
			emcCollaborationGroupItemProvider = new EMCCollaborationGroupItemProvider(this);
		}

		return emcCollaborationGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.collaborationpackage.EMCDiagram} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMCDiagramItemProvider emcDiagramItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.collaborationpackage.EMCDiagram}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMCDiagramAdapter() {
		if (emcDiagramItemProvider == null) {
			emcDiagramItemProvider = new EMCDiagramItemProvider(this);
		}

		return emcDiagramItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.collaborationpackage.EMCRelation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMCRelationItemProvider emcRelationItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.collaborationpackage.EMCRelation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMCRelationAdapter() {
		if (emcRelationItemProvider == null) {
			emcRelationItemProvider = new EMCRelationItemProvider(this);
		}

		return emcRelationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.collaborationpackage.EMCCollaborationRelation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMCCollaborationRelationItemProvider emcCollaborationRelationItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.collaborationpackage.EMCCollaborationRelation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMCCollaborationRelationAdapter() {
		if (emcCollaborationRelationItemProvider == null) {
			emcCollaborationRelationItemProvider = new EMCCollaborationRelationItemProvider(this);
		}

		return emcCollaborationRelationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.collaborationpackage.EMCSequenceRelation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMCSequenceRelationItemProvider emcSequenceRelationItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.collaborationpackage.EMCSequenceRelation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMCSequenceRelationAdapter() {
		if (emcSequenceRelationItemProvider == null) {
			emcSequenceRelationItemProvider = new EMCSequenceRelationItemProvider(this);
		}

		return emcSequenceRelationItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class) || (((Class)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (emcLogicalConnectorItemProvider != null) emcLogicalConnectorItemProvider.dispose();
		if (emcAndItemProvider != null) emcAndItemProvider.dispose();
		if (emcorItemProvider != null) emcorItemProvider.dispose();
		if (emcCollaborationGroupItemProvider != null) emcCollaborationGroupItemProvider.dispose();
		if (emcDiagramItemProvider != null) emcDiagramItemProvider.dispose();
		if (emcRelationItemProvider != null) emcRelationItemProvider.dispose();
		if (emcCollaborationRelationItemProvider != null) emcCollaborationRelationItemProvider.dispose();
		if (emcSequenceRelationItemProvider != null) emcSequenceRelationItemProvider.dispose();
	}

}
