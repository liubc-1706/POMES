/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package vpml.processpackage.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import vpml.processpackage.util.ProcesspackageAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ProcesspackageItemProviderAdapterFactory extends ProcesspackageAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection supportedTypes = new ArrayList();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ProcesspackageItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);		
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.processpackage.EMPNormalActivity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMPNormalActivityItemProvider empNormalActivityItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.processpackage.EMPNormalActivity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMPNormalActivityAdapter() {
		if (empNormalActivityItemProvider == null) {
			empNormalActivityItemProvider = new EMPNormalActivityItemProvider(this);
		}

		return empNormalActivityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.processpackage.EMPBatchActivity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMPBatchActivityItemProvider empBatchActivityItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.processpackage.EMPBatchActivity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMPBatchActivityAdapter() {
		if (empBatchActivityItemProvider == null) {
			empBatchActivityItemProvider = new EMPBatchActivityItemProvider(this);
		}

		return empBatchActivityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.processpackage.EMPActivity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMPActivityItemProvider empActivityItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.processpackage.EMPActivity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMPActivityAdapter() {
		if (empActivityItemProvider == null) {
			empActivityItemProvider = new EMPActivityItemProvider(this);
		}

		return empActivityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.processpackage.EMPObject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMPObjectItemProvider empObjectItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.processpackage.EMPObject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMPObjectAdapter() {
		if (empObjectItemProvider == null) {
			empObjectItemProvider = new EMPObjectItemProvider(this);
		}

		return empObjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.processpackage.EMPFlow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMPFlowItemProvider empFlowItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.processpackage.EMPFlow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMPFlowAdapter() {
		if (empFlowItemProvider == null) {
			empFlowItemProvider = new EMPFlowItemProvider(this);
		}

		return empFlowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.processpackage.EMPDataFlow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMPDataFlowItemProvider empDataFlowItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.processpackage.EMPDataFlow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMPDataFlowAdapter() {
		if (empDataFlowItemProvider == null) {
			empDataFlowItemProvider = new EMPDataFlowItemProvider(this);
		}

		return empDataFlowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.processpackage.EMPAssFlow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMPAssFlowItemProvider empAssFlowItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.processpackage.EMPAssFlow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMPAssFlowAdapter() {
		if (empAssFlowItemProvider == null) {
			empAssFlowItemProvider = new EMPAssFlowItemProvider(this);
		}

		return empAssFlowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.processpackage.EMPClockFlow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMPClockFlowItemProvider empClockFlowItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.processpackage.EMPClockFlow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMPClockFlowAdapter() {
		if (empClockFlowItemProvider == null) {
			empClockFlowItemProvider = new EMPClockFlowItemProvider(this);
		}

		return empClockFlowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.processpackage.EMPLogicalConnector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMPLogicalConnectorItemProvider empLogicalConnectorItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.processpackage.EMPLogicalConnector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMPLogicalConnectorAdapter() {
		if (empLogicalConnectorItemProvider == null) {
			empLogicalConnectorItemProvider = new EMPLogicalConnectorItemProvider(this);
		}

		return empLogicalConnectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.processpackage.EMPInAnd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMPInAndItemProvider empInAndItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.processpackage.EMPInAnd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMPInAndAdapter() {
		if (empInAndItemProvider == null) {
			empInAndItemProvider = new EMPInAndItemProvider(this);
		}

		return empInAndItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.processpackage.EMPOutAnd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMPOutAndItemProvider empOutAndItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.processpackage.EMPOutAnd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMPOutAndAdapter() {
		if (empOutAndItemProvider == null) {
			empOutAndItemProvider = new EMPOutAndItemProvider(this);
		}

		return empOutAndItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.processpackage.EMPInOr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMPInOrItemProvider empInOrItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.processpackage.EMPInOr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMPInOrAdapter() {
		if (empInOrItemProvider == null) {
			empInOrItemProvider = new EMPInOrItemProvider(this);
		}

		return empInOrItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.processpackage.EMPOutOr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMPOutOrItemProvider empOutOrItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.processpackage.EMPOutOr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMPOutOrAdapter() {
		if (empOutOrItemProvider == null) {
			empOutOrItemProvider = new EMPOutOrItemProvider(this);
		}

		return empOutOrItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.processpackage.EMPClock} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMPClockItemProvider empClockItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.processpackage.EMPClock}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMPClockAdapter() {
		if (empClockItemProvider == null) {
			empClockItemProvider = new EMPClockItemProvider(this);
		}

		return empClockItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.processpackage.EMPCompActivity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMPCompActivityItemProvider empCompActivityItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.processpackage.EMPCompActivity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMPCompActivityAdapter() {
		if (empCompActivityItemProvider == null) {
			empCompActivityItemProvider = new EMPCompActivityItemProvider(this);
		}

		return empCompActivityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.processpackage.EMPInConnector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMPInConnectorItemProvider empInConnectorItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.processpackage.EMPInConnector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMPInConnectorAdapter() {
		if (empInConnectorItemProvider == null) {
			empInConnectorItemProvider = new EMPInConnectorItemProvider(this);
		}

		return empInConnectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.processpackage.EMPOutConnector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMPOutConnectorItemProvider empOutConnectorItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.processpackage.EMPOutConnector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMPOutConnectorAdapter() {
		if (empOutConnectorItemProvider == null) {
			empOutConnectorItemProvider = new EMPOutConnectorItemProvider(this);
		}

		return empOutConnectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.processpackage.EMPLeafActivity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMPLeafActivityItemProvider empLeafActivityItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.processpackage.EMPLeafActivity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMPLeafActivityAdapter() {
		if (empLeafActivityItemProvider == null) {
			empLeafActivityItemProvider = new EMPLeafActivityItemProvider(this);
		}

		return empLeafActivityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.processpackage.EMPProduct} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMPProductItemProvider empProductItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.processpackage.EMPProduct}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMPProductAdapter() {
		if (empProductItemProvider == null) {
			empProductItemProvider = new EMPProductItemProvider(this);
		}

		return empProductItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.processpackage.EMPProductPackage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMPProductPackageItemProvider empProductPackageItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.processpackage.EMPProductPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMPProductPackageAdapter() {
		if (empProductPackageItemProvider == null) {
			empProductPackageItemProvider = new EMPProductPackageItemProvider(this);
		}

		return empProductPackageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.processpackage.EMPLeafProduct} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMPLeafProductItemProvider empLeafProductItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.processpackage.EMPLeafProduct}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMPLeafProductAdapter() {
		if (empLeafProductItemProvider == null) {
			empLeafProductItemProvider = new EMPLeafProductItemProvider(this);
		}

		return empLeafProductItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.processpackage.EMPRefFlow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMPRefFlowItemProvider empRefFlowItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.processpackage.EMPRefFlow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMPRefFlowAdapter() {
		if (empRefFlowItemProvider == null) {
			empRefFlowItemProvider = new EMPRefFlowItemProvider(this);
		}

		return empRefFlowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.processpackage.EMPDocument} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMPDocumentItemProvider empDocumentItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.processpackage.EMPDocument}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMPDocumentAdapter() {
		if (empDocumentItemProvider == null) {
			empDocumentItemProvider = new EMPDocumentItemProvider(this);
		}

		return empDocumentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.processpackage.EMPArtifact} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMPArtifactItemProvider empArtifactItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.processpackage.EMPArtifact}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMPArtifactAdapter() {
		if (empArtifactItemProvider == null) {
			empArtifactItemProvider = new EMPArtifactItemProvider(this);
		}

		return empArtifactItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.processpackage.EMPOther} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMPOtherItemProvider empOtherItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.processpackage.EMPOther}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMPOtherAdapter() {
		if (empOtherItemProvider == null) {
			empOtherItemProvider = new EMPOtherItemProvider(this);
		}

		return empOtherItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.processpackage.EMPAttributeItem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMPAttributeItemItemProvider empAttributeItemItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.processpackage.EMPAttributeItem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMPAttributeItemAdapter() {
		if (empAttributeItemItemProvider == null) {
			empAttributeItemItemProvider = new EMPAttributeItemItemProvider(this);
		}

		return empAttributeItemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.processpackage.EMPAutoActivity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMPAutoActivityItemProvider empAutoActivityItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.processpackage.EMPAutoActivity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMPAutoActivityAdapter() {
		if (empAutoActivityItemProvider == null) {
			empAutoActivityItemProvider = new EMPAutoActivityItemProvider(this);
		}

		return empAutoActivityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.processpackage.EMPManualBatchActivity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMPManualBatchActivityItemProvider empManualBatchActivityItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.processpackage.EMPManualBatchActivity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMPManualBatchActivityAdapter() {
		if (empManualBatchActivityItemProvider == null) {
			empManualBatchActivityItemProvider = new EMPManualBatchActivityItemProvider(this);
		}

		return empManualBatchActivityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.processpackage.EMPAutoBatchActivity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMPAutoBatchActivityItemProvider empAutoBatchActivityItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.processpackage.EMPAutoBatchActivity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMPAutoBatchActivityAdapter() {
		if (empAutoBatchActivityItemProvider == null) {
			empAutoBatchActivityItemProvider = new EMPAutoBatchActivityItemProvider(this);
		}

		return empAutoBatchActivityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.processpackage.EMPMessage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMPMessageItemProvider empMessageItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.processpackage.EMPMessage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMPMessageAdapter() {
		if (empMessageItemProvider == null) {
			empMessageItemProvider = new EMPMessageItemProvider(this);
		}

		return empMessageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.processpackage.EMPDiagram} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMPDiagramItemProvider empDiagramItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.processpackage.EMPDiagram}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMPDiagramAdapter() {
		if (empDiagramItemProvider == null) {
			empDiagramItemProvider = new EMPDiagramItemProvider(this);
		}

		return empDiagramItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.processpackage.EMPMileStone} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMPMileStoneItemProvider empMileStoneItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.processpackage.EMPMileStone}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMPMileStoneAdapter() {
		if (empMileStoneItemProvider == null) {
			empMileStoneItemProvider = new EMPMileStoneItemProvider(this);
		}

		return empMileStoneItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.processpackage.EMPForm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMPFormItemProvider empFormItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.processpackage.EMPForm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMPFormAdapter() {
		if (empFormItemProvider == null) {
			empFormItemProvider = new EMPFormItemProvider(this);
		}

		return empFormItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class) || (((Class)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (empNormalActivityItemProvider != null) empNormalActivityItemProvider.dispose();
		if (empBatchActivityItemProvider != null) empBatchActivityItemProvider.dispose();
		if (empActivityItemProvider != null) empActivityItemProvider.dispose();
		if (empObjectItemProvider != null) empObjectItemProvider.dispose();
		if (empFlowItemProvider != null) empFlowItemProvider.dispose();
		if (empDataFlowItemProvider != null) empDataFlowItemProvider.dispose();
		if (empAssFlowItemProvider != null) empAssFlowItemProvider.dispose();
		if (empClockFlowItemProvider != null) empClockFlowItemProvider.dispose();
		if (empLogicalConnectorItemProvider != null) empLogicalConnectorItemProvider.dispose();
		if (empInAndItemProvider != null) empInAndItemProvider.dispose();
		if (empOutAndItemProvider != null) empOutAndItemProvider.dispose();
		if (empInOrItemProvider != null) empInOrItemProvider.dispose();
		if (empOutOrItemProvider != null) empOutOrItemProvider.dispose();
		if (empClockItemProvider != null) empClockItemProvider.dispose();
		if (empCompActivityItemProvider != null) empCompActivityItemProvider.dispose();
		if (empInConnectorItemProvider != null) empInConnectorItemProvider.dispose();
		if (empOutConnectorItemProvider != null) empOutConnectorItemProvider.dispose();
		if (empLeafActivityItemProvider != null) empLeafActivityItemProvider.dispose();
		if (empProductItemProvider != null) empProductItemProvider.dispose();
		if (empProductPackageItemProvider != null) empProductPackageItemProvider.dispose();
		if (empLeafProductItemProvider != null) empLeafProductItemProvider.dispose();
		if (empRefFlowItemProvider != null) empRefFlowItemProvider.dispose();
		if (empDocumentItemProvider != null) empDocumentItemProvider.dispose();
		if (empArtifactItemProvider != null) empArtifactItemProvider.dispose();
		if (empOtherItemProvider != null) empOtherItemProvider.dispose();
		if (empAttributeItemItemProvider != null) empAttributeItemItemProvider.dispose();
		if (empAutoActivityItemProvider != null) empAutoActivityItemProvider.dispose();
		if (empManualBatchActivityItemProvider != null) empManualBatchActivityItemProvider.dispose();
		if (empAutoBatchActivityItemProvider != null) empAutoBatchActivityItemProvider.dispose();
		if (empMessageItemProvider != null) empMessageItemProvider.dispose();
		if (empDiagramItemProvider != null) empDiagramItemProvider.dispose();
		if (empMileStoneItemProvider != null) empMileStoneItemProvider.dispose();
		if (empFormItemProvider != null) empFormItemProvider.dispose();
	}

}
