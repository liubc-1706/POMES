/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package vpml.resourcepackage.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import vpml.resourcepackage.util.ResourcepackageAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ResourcepackageItemProviderAdapterFactory extends ResourcepackageAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection supportedTypes = new ArrayList();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ResourcepackageItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);		
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.resourcepackage.EMRResourceType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMRResourceTypeItemProvider emrResourceTypeItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.resourcepackage.EMRResourceType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMRResourceTypeAdapter() {
		if (emrResourceTypeItemProvider == null) {
			emrResourceTypeItemProvider = new EMRResourceTypeItemProvider(this);
		}

		return emrResourceTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.resourcepackage.EMRBasicResourceType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMRBasicResourceTypeItemProvider emrBasicResourceTypeItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.resourcepackage.EMRBasicResourceType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMRBasicResourceTypeAdapter() {
		if (emrBasicResourceTypeItemProvider == null) {
			emrBasicResourceTypeItemProvider = new EMRBasicResourceTypeItemProvider(this);
		}

		return emrBasicResourceTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.resourcepackage.EMRClassificationRelation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMRClassificationRelationItemProvider emrClassificationRelationItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.resourcepackage.EMRClassificationRelation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMRClassificationRelationAdapter() {
		if (emrClassificationRelationItemProvider == null) {
			emrClassificationRelationItemProvider = new EMRClassificationRelationItemProvider(this);
		}

		return emrClassificationRelationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.resourcepackage.EMRAbstractResourceType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMRAbstractResourceTypeItemProvider emrAbstractResourceTypeItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.resourcepackage.EMRAbstractResourceType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMRAbstractResourceTypeAdapter() {
		if (emrAbstractResourceTypeItemProvider == null) {
			emrAbstractResourceTypeItemProvider = new EMRAbstractResourceTypeItemProvider(this);
		}

		return emrAbstractResourceTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.resourcepackage.EMRAbstractRole} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMRAbstractRoleItemProvider emrAbstractRoleItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.resourcepackage.EMRAbstractRole}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMRAbstractRoleAdapter() {
		if (emrAbstractRoleItemProvider == null) {
			emrAbstractRoleItemProvider = new EMRAbstractRoleItemProvider(this);
		}

		return emrAbstractRoleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.resourcepackage.EMRAbstractToolType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMRAbstractToolTypeItemProvider emrAbstractToolTypeItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.resourcepackage.EMRAbstractToolType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMRAbstractToolTypeAdapter() {
		if (emrAbstractToolTypeItemProvider == null) {
			emrAbstractToolTypeItemProvider = new EMRAbstractToolTypeItemProvider(this);
		}

		return emrAbstractToolTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.resourcepackage.EMRAbstractMachineType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMRAbstractMachineTypeItemProvider emrAbstractMachineTypeItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.resourcepackage.EMRAbstractMachineType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMRAbstractMachineTypeAdapter() {
		if (emrAbstractMachineTypeItemProvider == null) {
			emrAbstractMachineTypeItemProvider = new EMRAbstractMachineTypeItemProvider(this);
		}

		return emrAbstractMachineTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.resourcepackage.EMRAbstractLocationType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMRAbstractLocationTypeItemProvider emrAbstractLocationTypeItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.resourcepackage.EMRAbstractLocationType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMRAbstractLocationTypeAdapter() {
		if (emrAbstractLocationTypeItemProvider == null) {
			emrAbstractLocationTypeItemProvider = new EMRAbstractLocationTypeItemProvider(this);
		}

		return emrAbstractLocationTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.resourcepackage.EMRToolType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMRToolTypeItemProvider emrToolTypeItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.resourcepackage.EMRToolType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMRToolTypeAdapter() {
		if (emrToolTypeItemProvider == null) {
			emrToolTypeItemProvider = new EMRToolTypeItemProvider(this);
		}

		return emrToolTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.resourcepackage.EMRMachineType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMRMachineTypeItemProvider emrMachineTypeItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.resourcepackage.EMRMachineType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMRMachineTypeAdapter() {
		if (emrMachineTypeItemProvider == null) {
			emrMachineTypeItemProvider = new EMRMachineTypeItemProvider(this);
		}

		return emrMachineTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.resourcepackage.EMRLocationType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMRLocationTypeItemProvider emrLocationTypeItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.resourcepackage.EMRLocationType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMRLocationTypeAdapter() {
		if (emrLocationTypeItemProvider == null) {
			emrLocationTypeItemProvider = new EMRLocationTypeItemProvider(this);
		}

		return emrLocationTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.resourcepackage.EMRRole} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMRRoleItemProvider emrRoleItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.resourcepackage.EMRRole}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMRRoleAdapter() {
		if (emrRoleItemProvider == null) {
			emrRoleItemProvider = new EMRRoleItemProvider(this);
		}

		return emrRoleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.resourcepackage.EMRDiagram} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMRDiagramItemProvider emrDiagramItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.resourcepackage.EMRDiagram}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMRDiagramAdapter() {
		if (emrDiagramItemProvider == null) {
			emrDiagramItemProvider = new EMRDiagramItemProvider(this);
		}

		return emrDiagramItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.resourcepackage.EMRObject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMRObjectItemProvider emrObjectItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.resourcepackage.EMRObject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMRObjectAdapter() {
		if (emrObjectItemProvider == null) {
			emrObjectItemProvider = new EMRObjectItemProvider(this);
		}

		return emrObjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.resourcepackage.EMRRelation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMRRelationItemProvider emrRelationItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.resourcepackage.EMRRelation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMRRelationAdapter() {
		if (emrRelationItemProvider == null) {
			emrRelationItemProvider = new EMRRelationItemProvider(this);
		}

		return emrRelationItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class) || (((Class)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (emrResourceTypeItemProvider != null) emrResourceTypeItemProvider.dispose();
		if (emrBasicResourceTypeItemProvider != null) emrBasicResourceTypeItemProvider.dispose();
		if (emrClassificationRelationItemProvider != null) emrClassificationRelationItemProvider.dispose();
		if (emrAbstractResourceTypeItemProvider != null) emrAbstractResourceTypeItemProvider.dispose();
		if (emrAbstractRoleItemProvider != null) emrAbstractRoleItemProvider.dispose();
		if (emrAbstractToolTypeItemProvider != null) emrAbstractToolTypeItemProvider.dispose();
		if (emrAbstractMachineTypeItemProvider != null) emrAbstractMachineTypeItemProvider.dispose();
		if (emrAbstractLocationTypeItemProvider != null) emrAbstractLocationTypeItemProvider.dispose();
		if (emrToolTypeItemProvider != null) emrToolTypeItemProvider.dispose();
		if (emrMachineTypeItemProvider != null) emrMachineTypeItemProvider.dispose();
		if (emrLocationTypeItemProvider != null) emrLocationTypeItemProvider.dispose();
		if (emrRoleItemProvider != null) emrRoleItemProvider.dispose();
		if (emrDiagramItemProvider != null) emrDiagramItemProvider.dispose();
		if (emrObjectItemProvider != null) emrObjectItemProvider.dispose();
		if (emrRelationItemProvider != null) emrRelationItemProvider.dispose();
	}

}
