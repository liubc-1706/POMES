/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package vpml.informationpackage.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import vpml.informationpackage.util.InformationpackageAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class InformationpackageItemProviderAdapterFactory extends InformationpackageAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection supportedTypes = new ArrayList();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public InformationpackageItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);		
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.informationpackage.EMIComplexItem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMIComplexItemItemProvider emiComplexItemItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.informationpackage.EMIComplexItem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMIComplexItemAdapter() {
		if (emiComplexItemItemProvider == null) {
			emiComplexItemItemProvider = new EMIComplexItemItemProvider(this);
		}

		return emiComplexItemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.informationpackage.EMIForm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMIFormItemProvider emiFormItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.informationpackage.EMIForm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMIFormAdapter() {
		if (emiFormItemProvider == null) {
			emiFormItemProvider = new EMIFormItemProvider(this);
		}

		return emiFormItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.informationpackage.EMIEnum} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMIEnumItemProvider emiEnumItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.informationpackage.EMIEnum}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMIEnumAdapter() {
		if (emiEnumItemProvider == null) {
			emiEnumItemProvider = new EMIEnumItemProvider(this);
		}

		return emiEnumItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.informationpackage.EMIEnumLiteral} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMIEnumLiteralItemProvider emiEnumLiteralItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.informationpackage.EMIEnumLiteral}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMIEnumLiteralAdapter() {
		if (emiEnumLiteralItemProvider == null) {
			emiEnumLiteralItemProvider = new EMIEnumLiteralItemProvider(this);
		}

		return emiEnumLiteralItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.informationpackage.EMISimpleAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMISimpleAttributeItemProvider emiSimpleAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.informationpackage.EMISimpleAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMISimpleAttributeAdapter() {
		if (emiSimpleAttributeItemProvider == null) {
			emiSimpleAttributeItemProvider = new EMISimpleAttributeItemProvider(this);
		}

		return emiSimpleAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.informationpackage.EMIList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMIListItemProvider emiListItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.informationpackage.EMIList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMIListAdapter() {
		if (emiListItemProvider == null) {
			emiListItemProvider = new EMIListItemProvider(this);
		}

		return emiListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.informationpackage.EMIStatAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMIStatAttributeItemProvider emiStatAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.informationpackage.EMIStatAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMIStatAttributeAdapter() {
		if (emiStatAttributeItemProvider == null) {
			emiStatAttributeItemProvider = new EMIStatAttributeItemProvider(this);
		}

		return emiStatAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.informationpackage.EMIComplexAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMIComplexAttributeItemProvider emiComplexAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.informationpackage.EMIComplexAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMIComplexAttributeAdapter() {
		if (emiComplexAttributeItemProvider == null) {
			emiComplexAttributeItemProvider = new EMIComplexAttributeItemProvider(this);
		}

		return emiComplexAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vpml.informationpackage.EMIAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMIAttributeItemProvider emiAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link vpml.informationpackage.EMIAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEMIAttributeAdapter() {
		if (emiAttributeItemProvider == null) {
			emiAttributeItemProvider = new EMIAttributeItemProvider(this);
		}

		return emiAttributeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class) || (((Class)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (emiComplexItemItemProvider != null) emiComplexItemItemProvider.dispose();
		if (emiFormItemProvider != null) emiFormItemProvider.dispose();
		if (emiEnumItemProvider != null) emiEnumItemProvider.dispose();
		if (emiEnumLiteralItemProvider != null) emiEnumLiteralItemProvider.dispose();
		if (emiSimpleAttributeItemProvider != null) emiSimpleAttributeItemProvider.dispose();
		if (emiListItemProvider != null) emiListItemProvider.dispose();
		if (emiStatAttributeItemProvider != null) emiStatAttributeItemProvider.dispose();
		if (emiComplexAttributeItemProvider != null) emiComplexAttributeItemProvider.dispose();
		if (emiAttributeItemProvider != null) emiAttributeItemProvider.dispose();
	}

}
